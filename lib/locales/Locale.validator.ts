/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util"
import Ajv = require("ajv")
import Locale from "./Locale"
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
})

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"))

export { Locale }
export const LocaleSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  additionalProperties: false,
  defaultProperties: [],
  definitions: {
    "Partial<Hero>": {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        action: {
          enum: [
            "ADD_TO_CALENDAR(PRESALE_START)",
            "ADD_TO_CALENDAR(SALE_START)",
            "GO_TO_PARAS",
            "MINT",
            "SIGN_IN",
          ],
          type: "string",
        },
        backgroundColor: {
          type: "string",
        },
        backgroundImage: {
          type: "string",
        },
        body: {
          type: "string",
        },
        cta: {
          type: "string",
        },
        image: {
          type: "string",
        },
        ps: {
          type: "string",
        },
        remaining: {
          type: "string",
        },
        setNumber: {
          type: "string",
        },
        title: {
          type: "string",
        },
        video: {
          type: "string",
        },
      },
      type: "object",
    },
    SectionI18n: {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        backgroundColor: {
          type: "string",
        },
        backgroundImage: {
          type: "string",
        },
        className: {
          type: "string",
        },
        image: {
          type: "string",
        },
        text: {
          description:
            "This file specifies the exact shape of data required in the locales files\nlocated in `config/locales/*.json`\n\nWe then use `typescript-json-validator` to generate a JSON validator based on\nthese types, which lives in `./Locale.validator.ts`",
          type: "string",
        },
        video: {
          type: "string",
        },
      },
      required: ["text"],
      type: "object",
    },
  },
  properties: {
    calendarEvent: {
      type: "string",
    },
    close: {
      type: "string",
    },
    connectWallet: {
      type: "string",
    },
    description: {
      type: "string",
    },
    extraSections: {
      items: {
        $ref: "#/definitions/SectionI18n",
      },
      type: "array",
    },
    hero: {
      additionalProperties: false,
      properties: {
        action: {
          enum: [
            "ADD_TO_CALENDAR(PRESALE_START)",
            "ADD_TO_CALENDAR(SALE_START)",
            "GO_TO_PARAS",
            "MINT",
            "SIGN_IN",
          ],
          type: "string",
        },
        allSold: {
          additionalProperties: false,
          properties: {
            action: {
              enum: [
                "ADD_TO_CALENDAR(PRESALE_START)",
                "ADD_TO_CALENDAR(SALE_START)",
                "GO_TO_PARAS",
                "MINT",
                "SIGN_IN",
              ],
              type: "string",
            },
            backgroundColor: {
              type: "string",
            },
            backgroundImage: {
              type: "string",
            },
            body: {
              type: "string",
            },
            cta: {
              type: "string",
            },
            image: {
              type: "string",
            },
            ps: {
              type: "string",
            },
            remaining: {
              type: "string",
            },
            setNumber: {
              type: "string",
            },
            signedIn: {
              $ref: "#/definitions/Partial<Hero>",
            },
            signedOut: {
              $ref: "#/definitions/Partial<Hero>",
            },
            title: {
              type: "string",
            },
            video: {
              type: "string",
            },
            vip: {
              $ref: "#/definitions/Partial<Hero>",
            },
          },
          type: "object",
        },
        backgroundColor: {
          type: "string",
        },
        backgroundImage: {
          type: "string",
        },
        body: {
          type: "string",
        },
        cta: {
          type: "string",
        },
        image: {
          type: "string",
        },
        presale: {
          additionalProperties: false,
          properties: {
            action: {
              enum: [
                "ADD_TO_CALENDAR(PRESALE_START)",
                "ADD_TO_CALENDAR(SALE_START)",
                "GO_TO_PARAS",
                "MINT",
                "SIGN_IN",
              ],
              type: "string",
            },
            backgroundColor: {
              type: "string",
            },
            backgroundImage: {
              type: "string",
            },
            body: {
              type: "string",
            },
            cta: {
              type: "string",
            },
            image: {
              type: "string",
            },
            ps: {
              type: "string",
            },
            remaining: {
              type: "string",
            },
            setNumber: {
              type: "string",
            },
            signedIn: {
              $ref: "#/definitions/Partial<Hero>",
            },
            signedOut: {
              $ref: "#/definitions/Partial<Hero>",
            },
            title: {
              type: "string",
            },
            video: {
              type: "string",
            },
            vip: {
              $ref: "#/definitions/Partial<Hero>",
            },
          },
          type: "object",
        },
        ps: {
          type: "string",
        },
        saleClosed: {
          additionalProperties: false,
          properties: {
            action: {
              enum: [
                "ADD_TO_CALENDAR(PRESALE_START)",
                "ADD_TO_CALENDAR(SALE_START)",
                "GO_TO_PARAS",
                "MINT",
                "SIGN_IN",
              ],
              type: "string",
            },
            backgroundColor: {
              type: "string",
            },
            backgroundImage: {
              type: "string",
            },
            body: {
              type: "string",
            },
            cta: {
              type: "string",
            },
            image: {
              type: "string",
            },
            ps: {
              type: "string",
            },
            remaining: {
              type: "string",
            },
            setNumber: {
              type: "string",
            },
            signedIn: {
              $ref: "#/definitions/Partial<Hero>",
            },
            signedOut: {
              $ref: "#/definitions/Partial<Hero>",
            },
            title: {
              type: "string",
            },
            video: {
              type: "string",
            },
            vip: {
              $ref: "#/definitions/Partial<Hero>",
            },
          },
          type: "object",
        },
        saleOpen: {
          additionalProperties: false,
          properties: {
            action: {
              enum: [
                "ADD_TO_CALENDAR(PRESALE_START)",
                "ADD_TO_CALENDAR(SALE_START)",
                "GO_TO_PARAS",
                "MINT",
                "SIGN_IN",
              ],
              type: "string",
            },
            backgroundColor: {
              type: "string",
            },
            backgroundImage: {
              type: "string",
            },
            body: {
              type: "string",
            },
            cta: {
              type: "string",
            },
            image: {
              type: "string",
            },
            ps: {
              type: "string",
            },
            remaining: {
              type: "string",
            },
            setNumber: {
              type: "string",
            },
            signedIn: {
              $ref: "#/definitions/Partial<Hero>",
            },
            signedOut: {
              $ref: "#/definitions/Partial<Hero>",
            },
            title: {
              type: "string",
            },
            video: {
              type: "string",
            },
            vip: {
              $ref: "#/definitions/Partial<Hero>",
            },
          },
          type: "object",
        },
        remaining: {
          type: "string",
        },
        setNumber: {
          type: "string",
        },
        title: {
          type: "string",
        },
        video: {
          type: "string",
        },
      },
      type: "object",
    },
    langPicker: {
      type: "string",
    },
    myNFTs: {
      type: "string",
    },
    nextNFT: {
      type: "string",
    },
    prevNFT: {
      type: "string",
    },
    signOut: {
      type: "string",
    },
    new: {
      type: "string",
    },
    title: {
      type: "string",
    },
    viewIn: {
      type: "string",
    },
    zoomIn: {
      type: "string",
    },
    zoomOut: {
      type: "string",
    },
  },
  required: [
    "calendarEvent",
    "close",
    "connectWallet",
    "description",
    "hero",
    "langPicker",
    "myNFTs",
    "nextNFT",
    "prevNFT",
    "signOut",
    "new",
    "title",
    "viewIn",
    "zoomIn",
    "zoomOut",
  ],
  type: "object",
}
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">
export const isLocale = ajv.compile(LocaleSchema) as ValidateFunction<Locale>
export default function validate(value: unknown): Locale {
  if (isLocale(value)) {
    return value
  } else {
    throw new Error(
      ajv.errorsText(
        isLocale.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "Locale" }
      ) +
        "\n\n" +
        inspect(value)
    )
  }
}
